require("dotenv").config();
const express = require("express");
const { Pool } = require("pg");
const cors = require("cors");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 4000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ DATABASE_URL
if (!process.env.DATABASE_URL) {
    console.error("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!");
    process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === "production" ? { rejectUnauthorized: false } : false, // SSL —Ç–æ–ª—å–∫–æ –Ω–∞ Render
});

app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç)
app.use(express.static(path.join(__dirname, "public")));

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
pool.query(`
    CREATE TABLE IF NOT EXISTS guests (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        attending TEXT NOT NULL
    );
`).then(() => {
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ guests –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞");
}).catch(err => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
});

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π
app.get("/guests", async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM guests");
        res.json(result.rows);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üìå –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è
app.post("/submit", async (req, res) => {
    const { name, attending } = req.body;
    if (!name || !attending) {
        return res.status(400).json({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
    }
    try {
        await pool.query("INSERT INTO guests (name, attending) VALUES ($1, $2)", [name, attending]);
        res.json({ message: "–ì–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω!" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏" });
    }
});

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–ª)
app.use((err, req, res, next) => {
    console.error("–û—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
app.use(express.static(path.join(__dirname, "public")));

// –û—Ç–¥–∞—ë–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "inv.html")); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª `inv.html` –µ—Å—Ç—å!
});